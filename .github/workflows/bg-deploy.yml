name: Deploy to ECS Blue/Green

on:
  workflow_run:
    workflows: ["Build and Push to ECR"]
    types:
      - completed

env:
  AWS_REGION: eu-west-1
  PROJECT_NAME: cloudbasedproject
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::343218213563:role/GitHubActionsDeploymentRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Get latest Task Definition
        id: task-def
        run: |
          FAMILY=${{ env.PROJECT_NAME }}-task
          TASK_DEF_ARN=$(aws ecs list-task-definitions \
            --family-prefix $FAMILY \
            --sort DESC \
            --max-items 1 \
            --query "taskDefinitionArns[0]" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Generate AppSpec content
        id: appspec
        run: |
          cat > appspec.json <<EOF
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "${{ env.TASK_DEF_ARN }}",
                    "LoadBalancerInfo": {
                      "ContainerName": "${{ env.PROJECT_NAME }}-container",
                      "ContainerPort": 2020
                    }
                  }
                }
              }
            ]
          }
          EOF

      - name: Trigger Blue/Green Deployment
        run: |
          echo "{
            \"applicationName\": \"${{ env.PROJECT_NAME }}-app\",
            \"deploymentGroupName\": \"${{ env.PROJECT_NAME }}-deployment-group\",
            \"revision\": {
              \"revisionType\": \"AppSpecContent\",
              \"appSpecContent\": {
                \"content\": \"{
                  \\\"version\\\": 1,
                  \\\"Resources\\\": [
                    {
                      \\\"TargetService\\\": {
                        \\\"Type\\\": \\\"AWS::ECS::Service\\\",
                        \\\"Properties\\\": {
                          \\\"TaskDefinition\\\": \\\"${TASK_DEF_ARN}\\\",
                          \\\"LoadBalancerInfo\\\": {
                            \\\"ContainerName\\\": \\\"${{ env.PROJECT_NAME }}-container\\\",
                            \\\"ContainerPort\\\": 2020
                          }
                        }
                      }
                    }
                  ]
                }\"
              }
            }
          }" > deploy-payload.json

          aws deploy create-deployment \
            --cli-input-json file://deploy-payload.json \
            --region ${{ env.AWS_REGION }}
