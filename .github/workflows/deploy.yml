name: Build, Push, and Deploy to Amazon ECS via ECR

on:
  push:
    branches: ["master"]

env:
  AWS_REGION: eu-west-1
  ECR_REPO_NAME: cloudbasedproject-repo
  SERVICE_NAME: w5lab-CloudBasedService-pPOm3dfdVdTf
  CLUSTER_NAME: w5lab-ECSCluster-dUEBHSY5CZJK
  CONTAINER_NAME: cloudbased-container

jobs:
  build-and-deploy:
    name: Build Docker Image and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven Packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build JAR File
        run: mvn clean package -DskipTests

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR Repo if not exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" || \
          aws ecr create-repository --repository-name "$ECR_REPO_NAME" \
            --image-scanning-configuration scanOnPush=true \
            --region $AWS_REGION

      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPO_NAME:$IMAGE_TAG .
          docker tag $ECR_REPO_NAME:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG

      - name: Register New Task Definition Revision
        id: task-def
        run: |
          TASK_DEF_ARN=$(aws ecs list-task-definitions --family-prefix $SERVICE_NAME --sort DESC --max-items 1 --query "taskDefinitionArns[0]" --output text)
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN)
          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}" '.taskDefinition.containerDefinitions[0].image = $IMAGE | {family: .taskDefinition.family, containerDefinitions: .taskDefinition.containerDefinitions, executionRoleArn: .taskDefinition.executionRoleArn, networkMode: .taskDefinition.networkMode, requiresCompatibilities: .taskDefinition.requiresCompatibilities, cpu: .taskDefinition.cpu, memory: .taskDefinition.memory}')
          echo "$NEW_TASK_DEF" > new-task-def.json
          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json

      - name: Update ECS Service
        run: |
          NEW_REVISION=$(aws ecs list-task-definitions --family-prefix $SERVICE_NAME --sort DESC --max-items 1 --query "taskDefinitionArns[0]" --output text)
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_REVISION \
            --force-new-deployment
