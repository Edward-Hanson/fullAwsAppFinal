name: Build and Deploy Spring Boot App to ECS

on:
  push:
    branches: [ master ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: cloudbasedproject-repo
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    name: Build, Push to ECR, and Deploy via CodeDeploy
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repo if not exists
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

      - name: Build Spring Boot JAR
        run: mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

      - name: Tag image with full ECR URI
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY"
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      - name: Push image to ECR
        run: |
          docker push $ECR_URI:$IMAGE_TAG

      - name: Generate imagedefinitions.json
        run: |
          echo '[{
            "name": "springboot-container",
            "imageUri": "'"$ECR_URI:$IMAGE_TAG"'"
          }]' > imagedefinitions.json

      - name: Deploy to ECS via CodeDeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: imagedefinitions.json
          service: cloudbasedproject-service
          cluster: cloudbasedproject-cluster
          codedeploy-app-name: cloudbasedproject-codedeploy
          codedeploy-deployment-group: cloudbasedproject-deployment-group
